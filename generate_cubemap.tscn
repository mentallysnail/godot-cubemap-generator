[gd_scene load_steps=11 format=3 uid="uid://dn8bwailhogcx"]

[sub_resource type="GDScript" id="GDScript_xppgy"]
script/source = "@tool
extends Node
@export_dir var _path: String
@export var _save_as_cubemap : bool = true
@export var _save_as_cubemap_array : bool = false
@export var _save_as_texture_array : bool = false
@export var _generate : bool = false :
	set(value):
		_generate_cubemap()

func _generate_cubemap() -> void:

	#get_viewport().size = Vector2i(1024, 1536)
	#get_viewport().get_window().content_scale_size = get_viewport().size
	#for i in 2:
		#await get_tree().process_frame
	#get_viewport().get_texture().get_image().save_png(\"user://2x3.png\")
#
	#get_viewport().size = Vector2i(1536, 1024)
	#get_viewport().get_window().content_scale_size = get_viewport().size
	#for i in 2:
		#await get_tree().process_frame
	#get_viewport().get_texture().get_image().save_png(\"user://3x2.png\")
#
	#get_viewport().size = Vector2i(512, 3072)
	#get_viewport().get_window().content_scale_size = get_viewport().size
	#for i in 2:
		#await get_tree().process_frame
	#get_viewport().get_texture().get_image().save_png(\"user://1x6.png\")
#
	#get_viewport().size = Vector2i(3072, 512)
	#get_viewport().get_window().content_scale_size = get_viewport().size
	#for i in 2:
		#await get_tree().process_frame
	#get_viewport().get_texture().get_image().save_png(\"user://6x1.png\")
	#for i in 2:
		#await get_tree().process_frame
	#get_viewport().size = _init_size
	#get_viewport().get_window().content_scale_size = _init_content_scale_size
	#
	var _temp_images = []
	for _temp_view in %views.get_children():
		_temp_images.push_back(_temp_view.get_texture().get_image())
	#const LAYERS = 6
	#for i in LAYERS:
		#var image = Image.create_empty(128, 128, false, Image.FORMAT_RGB8)
		#if i % 3 == 0:
			#image.fill(Color.RED)
		#elif i % 3 == 1:
			#image.fill(Color.GREEN)
		#else:
			#image.fill(Color.BLUE)
		#images.push_back(image)

	# Create and save a 2D texture array. The array of images must have at least 1 Image.
	if _save_as_texture_array:
		var texture_2d_array = Texture2DArray.new()
		texture_2d_array.create_from_images(_temp_images)
		ResourceSaver.save(texture_2d_array, \"%s/texture_2d_array.res\" % _path, ResourceSaver.FLAG_COMPRESS)

	# Create and save a cubemap. The array of images must have exactly 6 Images.
	# The cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
	# (in Godot's coordinate system, so Y+ is \"up\" and Z- is \"forward\").
	if _save_as_cubemap:
		var cubemap = Cubemap.new()
		cubemap.create_from_images(_temp_images)
		ResourceSaver.save(cubemap, \"%s/cubemap.res\" % _path, ResourceSaver.FLAG_COMPRESS)

	# Create and save a cubemap array. The array of images must have a multiple of 6 Images.
	# Each cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
	# (in Godot's coordinate system, so Y+ is \"up\" and Z- is \"forward\").
	if _save_as_cubemap_array:
		var cubemap_array = CubemapArray.new()
		cubemap_array.create_from_images(_temp_images)
		ResourceSaver.save(cubemap_array, \"%s/cubemap_array.res\" % _path, ResourceSaver.FLAG_COMPRESS)
	#OS.shell_open(ProjectSettings.globalize_path(\"user://\"))
"

[sub_resource type="SphereMesh" id="SphereMesh_ogn1b"]
radius = 2.0
height = 4.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_x1bvs"]
albedo_color = Color(0.903333, 1, 0.42, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6gagp"]
albedo_color = Color(1, 0.18, 0.18, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_8k87f"]
albedo_color = Color(0.500198, 0.594126, 0.375037, 1)

[sub_resource type="BoxMesh" id="BoxMesh_ntmsc"]
size = Vector3(16, 1, 16)

[sub_resource type="Gradient" id="Gradient_edt1h"]
offsets = PackedFloat32Array(0, 0.245902, 0.491803, 0.590164, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.0807833, 0.0807833, 0.0807833, 1, 0.712129, 0.712129, 0.712129, 1, 0.473975, 0.473976, 0.473975, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_3461l"]
fractal_octaves = 9
fractal_lacunarity = 2.525
fractal_gain = 0.84

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7duix"]
seamless = true
color_ramp = SubResource("Gradient_edt1h")
noise = SubResource("FastNoiseLite_3461l")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_odam8"]
albedo_texture = SubResource("NoiseTexture2D_7duix")
uv1_scale = Vector3(6, 4, 2)
texture_filter = 5

[node name="CreateExampleCubemap" type="Node3D"]
script = SubResource("GDScript_xppgy")
_path = "res://"

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
visible = false
shadow_enabled = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2, 2, 5)
visible = false
mesh = SubResource("SphereMesh_ogn1b")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -12.8206, 2, -6.62304)
visible = false
mesh = SubResource("SphereMesh_ogn1b")
surface_material_override/0 = SubResource("StandardMaterial3D_x1bvs")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.15468, -3.50422, -6.02645)
visible = false
mesh = SubResource("SphereMesh_ogn1b")
surface_material_override/0 = SubResource("StandardMaterial3D_6gagp")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.15468, 2.30898, 0.973547)
visible = false
mesh = SubResource("SphereMesh_ogn1b")
surface_material_override/0 = SubResource("StandardMaterial3D_8k87f")

[node name="views" type="Node" parent="."]
unique_name_in_owner = true

[node name="view_x+" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_x+"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="view_x-" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_x-"]
transform = Transform3D(1.31134e-07, 0, 1, 0, 1, 0, -1, 0, 1.31134e-07, 0, 0, 0)
fov = 90.0

[node name="view_y+" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_y+"]
transform = Transform3D(-1, 0, 8.74228e-08, -8.74228e-08, -4.37114e-08, -1, 3.82137e-15, -1, 4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="view_y-" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_y-"]
transform = Transform3D(-1, 0, 8.74228e-08, 8.74228e-08, -4.37114e-08, 1, 3.82137e-15, 1, 4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="view_z+" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_z+"]
transform = Transform3D(-1, 0, 8.74228e-08, 0, 1, 0, -8.74228e-08, 0, -1, 0, 0, 0)
fov = 90.0

[node name="view_z-" type="SubViewport" parent="views"]
unique_name_in_owner = true
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="views/view_z-"]
transform = Transform3D(1, 0, -1.74846e-07, 0, 1, 0, 1.74846e-07, 0, 1, 0, 0, 0)
fov = 90.0

[node name="FlowContainer2" type="FlowContainer" parent="."]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 43.0
offset_bottom = 8.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/h_separation = 0
theme_override_constants/v_separation = 0

[node name="X+" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_x+" type="SubViewport" parent="FlowContainer2/X+"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/X+/view_x+"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="X-" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_x-" type="SubViewport" parent="FlowContainer2/X-"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/X-/view_x-"]
transform = Transform3D(1.31134e-07, 0, 1, 0, 1, 0, -1, 0, 1.31134e-07, 0, 0, 0)
fov = 90.0

[node name="Y+" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_y+" type="SubViewport" parent="FlowContainer2/Y+"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/Y+/view_y+"]
transform = Transform3D(-1, 0, 8.74228e-08, -8.74228e-08, -4.37114e-08, -1, 3.82137e-15, -1, 4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="Y-" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_y-" type="SubViewport" parent="FlowContainer2/Y-"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/Y-/view_y-"]
transform = Transform3D(-1, 0, 8.74228e-08, 8.74228e-08, -4.37114e-08, 1, 3.82137e-15, 1, 4.37114e-08, 0, 0, 0)
fov = 90.0

[node name="Z+" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_z+" type="SubViewport" parent="FlowContainer2/Z+"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/Z+/view_z+"]
transform = Transform3D(-1, 0, 8.74228e-08, 0, 1, 0, -8.74228e-08, 0, -1, 0, 0, 0)
fov = 90.0

[node name="Z-" type="SubViewportContainer" parent="FlowContainer2"]
layout_mode = 2

[node name="view_z-" type="SubViewport" parent="FlowContainer2/Z-"]
handle_input_locally = false
msaa_3d = 3
use_debanding = true
scaling_3d_scale = 2.0
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="FlowContainer2/Z-/view_z-"]
transform = Transform3D(1, 0, -1.74846e-07, 0, 1, 0, 1.74846e-07, 0, 1, 0, 0, 0)
fov = 90.0

[node name="MeshInstance3D5" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -6, 0)
visible = false
mesh = SubResource("BoxMesh_ntmsc")
surface_material_override/0 = SubResource("StandardMaterial3D_odam8")
